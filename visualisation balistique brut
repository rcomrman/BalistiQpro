import matplotlib.pyplot as plt
import numpy as np

# Définir les paramètres
v0 = 850  # Vitesse initiale en m/s (exemple, à ajuster selon les données réelles)
theta0 = np.radians(45)  # Angle de tir en radians (exemple, à ajuster)

# Définir les composantes de vitesse initiale
v0x = v0 * np.cos(theta0)
v0y = v0 * np.sin(theta0)
v0z = 0  # Pour un angle de tir standard, la composante verticale initiale est généralement nulle

m, k, v_vent, theta_vent = 0.01, 0.5, 5, 0  # Valeurs arbitraires, à ajuster selon les données réelles

# Spécifier les valeurs initiales
x0, y0, z0 = 0, 0, 0  # La balle part du point (0, 0, 0)

# Définir les fonctions x(t), y(t), z(t) avec les valeurs initiales ajoutées
def x(t):
    return x0 + v0x * t - (m/k) * v_vent * np.cos(theta_vent) * t**2 - 0.5 * k * t**2

def y(t):
    return y0 + v0y * t - 0.5 * 9.8 * t**2 - 0.5 * k * t**2  # Ajouter la composante de la gravité et la décroissance balistique

def z(t):
    return z0 + v0z * t - (m/k) * v_vent * np.sin(theta_vent) * t**2 - 0.5 * k * t**2

# Générer des valeurs de temps sur une plage plus large
t_values = np.linspace(0, 20, 1000)  # Ajuster la plage de temps selon les besoins

# Calculer les coordonnées correspondantes
x_values = x(t_values)
y_values = y(t_values)
z_values = z(t_values)

# Tracer la courbe en 3D
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.plot(x_values, y_values, z_values, label='Trajectoire du projectile')
ax.set_xlabel('Axe X')
ax.set_ylabel('Axe Y')
ax.set_zlabel('Axe Z')
ax.legend()

# Ajouter les vecteurs de vitesse initiaux à la position initiale
ax.quiver(x0, y0, z0, v0x, v0y, v0z, color='red', label='Vitesse de départ')

# Afficher le graphique
plt.show()
